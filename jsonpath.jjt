/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jsonpath.jj */
/*@egen*/options {
STATIC=false;
DEBUG_PARSER=false;
ERROR_REPORTING=true;
                       
                                
                      
}

PARSER_BEGIN(JSONPathCompiler)
import java.lang.reflect.*;

public class JSONPathCompiler/*@bgen(jjtree)*/implements JSONPathCompilerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJSONPathCompilerState jjtree = new JJTJSONPathCompilerState();

/*@egen*/
    public static class JSONNode extends SimpleNode {
        JSONNode(int i) {
            super(i);
        }
    }
    public int getChildrenCount() {
        return this.children==null?0:children.length;
    }

    public JSONNode at(int index) {
        return (JSONNode)(this.children==null ||
                            index<0 ||
                            index>=this.children.length ?
                            null:this.children[index]);
    }

    public String getName() {
        return JSONPathCompilerTreeConstants.jjtNodeName[this.id];
    }

    public void dump(String prefix) {
        System.out.println(prefix+toString());
        if( children!=null && children.length>0) {
            System.out.println(prefix+"  [");
            for (int i = 0; children!=null && i < children.length; ++i) {
                System.out.print(prefix+"("+(i+1)+")");
                SimpleNode c= (SimpleNode)children[i];

                if(c==null) {
                    System.out.println("null");
                } else {
                    c.dump(prefix+"    ");
                }
            }

            System.out.println(prefix+" ]");
        }
    }



    public Object eval(Object o) {
        if(o==null) return null;
        switch(this.id) {
            case JJTEXPRESSION: {
                if(getChildrenCount()==0) return null;
                for(int i=0;o!=null && i< getChildrenCount();++i) {
                    o=at(i).eval(o);
                }
                return o;
            }
            case JJTARRAY: {
                int index= Integer.class.cast(this.value);
                if(o instanceof java.util.List) {
                    java.util.List L=java.util.List.class.cast(o);

                    if(index<0 || index>= L.size()) return null;
                    return L.get(index);
                } else if(o.getClass().isArray()) {
                    Object L[]=(Object[])o;
                    if(index<0 || index>= L.length) return null;
                    return L[index];
                }

                return null;
            }

            case JJTOBJECT: {
                if(o instanceof java.util.Map) {
                    java.util.Map M=java.util.Map.class.cast(o);
                    return M.get(this.value);
                }

                return null;
            }

            default:
                System.err.println("Doesn't handle "+this.id);
                break;
        }

        return null;
    }



static SimpleNode jjtCreate(int id) {
    return new JSONNode(id);
}

public static void main(String args[]) {
    try {
        java.io.StringReader r= new java.io.StringReader(args[0]);
        JSONPathCompiler app= new JSONPathCompiler(r);
        JSONNode x=JSONNode.class.cast(app.expr());
        //x.dump("[xpath]");
        java.util.Map<String,Object> o1=new java.util.HashMap<String,Object>();
        java.util.HashMap o2=new java.util.HashMap<String,Object>();
        java.util.List<Object> o3=new java.util.ArrayList<Object>();

        o1.put("a",o3);
        o1.put("b",null);
        o1.put("c",Boolean.FALSE);
        o1.put("d",12345);

        o3.add("Hello");
        o3.add("World");
        o3.add(Boolean.TRUE);
        o3.add(Boolean.FALSE);
        o3.add(null);
        o3.add(o2);

        o2.put("name","Pierre");
        o2.put("year",2009);

        Object o=x.eval(o1);
        System.err.println("Compiling <code>"+args[0]+"</code>");
        System.err.println("Eval <code>"+o1+"</code>");
        System.err.println("Result is:<code>"+o+"</code>");
    }
    catch(Exception err) {
        err.printStackTrace();
    }
}
}
PARSER_END(JSONPathCompiler)

SKIP: {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
  <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <DOT: ".">
| <INTEGER: <DIGIT> (<DIGIT>)* >
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*>
| <OPEN_ARRAY: "[">
| <CLOSE_ARRAY: "]">
}



JSONNode expr()             :{/*@bgen(jjtree) EXPRESSION */
  JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) EXPRESSION */
        try {
/*@egen*/
        (array() | object() ) ( array() | <DOT> object() )* <EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
                {
                return jjtn000;
                }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        }

void array()       :{/*@bgen(jjtree) ARRAY */
                     JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTARRAY);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token i;}
        {/*@bgen(jjtree) ARRAY */
        try {
/*@egen*/
        <OPEN_ARRAY> i=<INTEGER> <CLOSE_ARRAY>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
                {
                jjtn000.value=new Integer(i.image);
                }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        }

void object()        : {/*@bgen(jjtree) OBJECT */
                         JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTOBJECT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token name;}
        {/*@bgen(jjtree) OBJECT */
        try {
/*@egen*/
        ( name=<IDENTIFIER>  )/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
                {
                jjtn000.value= name.image;
                }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        }
