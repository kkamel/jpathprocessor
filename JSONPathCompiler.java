/* Generated By:JJTree&JavaCC: Do not edit this line. JSONPathCompiler.java */
import java.lang.reflect.*;

public class JSONPathCompiler/*@bgen(jjtree)*/implements JSONPathCompilerTreeConstants, JSONPathCompilerConstants {/*@bgen(jjtree)*/
  protected JJTJSONPathCompilerState jjtree = new JJTJSONPathCompilerState();public static class JSONNode extends SimpleNode {
        JSONNode(int i) {
            super(i);
        }
    }
    public int getChildrenCount() {
        return this.children==null?0:children.length;
    }

    public JSONNode at(int index) {
        return (JSONNode)(this.children==null ||
                            index<0 ||
                            index>=this.children.length ?
                            null:this.children[index]);
    }

    public String getName() {
        return JSONPathCompilerTreeConstants.jjtNodeName[this.id];
    }

    public void dump(String prefix) {
        System.out.println(prefix+toString());
        if( children!=null && children.length>0) {
            System.out.println(prefix+"  [");
            for (int i = 0; children!=null && i < children.length; ++i) {
                System.out.print(prefix+"("+(i+1)+")");
                SimpleNode c= (SimpleNode)children[i];

                if(c==null) {
                    System.out.println("null");
                } else {
                    c.dump(prefix+"    ");
                }
            }

            System.out.println(prefix+" ]");
        }
    }



    public Object eval(Object o) {
        if(o==null) return null;
        switch(this.id) {
            case JJTEXPRESSION: {
                if(getChildrenCount()==0) return null;
                for(int i=0;o!=null && i< getChildrenCount();++i) {
                    o=at(i).eval(o);
                }
                return o;
            }
            case JJTARRAY: {
                int index= Integer.class.cast(this.value);
                if(o instanceof java.util.List) {
                    java.util.List L=java.util.List.class.cast(o);

                    if(index<0 || index>= L.size()) return null;
                    return L.get(index);
                } else if(o.getClass().isArray()) {
                    Object L[]=(Object[])o;
                    if(index<0 || index>= L.length) return null;
                    return L[index];
                }

                return null;
            }

            case JJTOBJECT: {
                if(o instanceof java.util.Map) {
                    java.util.Map M=java.util.Map.class.cast(o);
                    return M.get(this.value);
                }

                return null;
            }

            default:
                System.err.println("Doesn't handle "+this.id);
                break;
        }

        return null;
    }



static SimpleNode jjtCreate(int id) {
    return new JSONNode(id);
}

public static void main(String args[]) {
    try {
        java.io.StringReader r= new java.io.StringReader(args[0]);
        JSONPathCompiler app= new JSONPathCompiler(r);
        JSONNode x=JSONNode.class.cast(app.expr());
        //x.dump("[xpath]");
        java.util.Map<String,Object> o1=new java.util.HashMap<String,Object>();
        java.util.HashMap o2=new java.util.HashMap<String,Object>();
        java.util.List<Object> o3=new java.util.ArrayList<Object>();

        o1.put("a",o3);
        o1.put("b",null);
        o1.put("c",Boolean.FALSE);
        o1.put("d",12345);

        o3.add("Hello");
        o3.add("World");
        o3.add(Boolean.TRUE);
        o3.add(Boolean.FALSE);
        o3.add(null);
        o3.add(o2);

        o2.put("name","Pierre");
        o2.put("year",2009);

        Object o=x.eval(o1);
        System.err.println("Compiling <code>"+args[0]+"</code>");
        System.err.println("Eval <code>"+o1+"</code>");
        System.err.println("Result is:<code>"+o+"</code>");
    }
    catch(Exception err) {
        err.printStackTrace();
    }
}

  final public JSONNode expr() throws ParseException {
                              /*@bgen(jjtree) EXPRESSION */
  JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_ARRAY:
        array();
        break;
      case IDENTIFIER:
        object();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case OPEN_ARRAY:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_ARRAY:
          array();
          break;
        case DOT:
          jj_consume_token(DOT);
          object();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void array() throws ParseException {
                     /*@bgen(jjtree) ARRAY */
                     JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTARRAY);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token i;
    try {
      jj_consume_token(OPEN_ARRAY);
      i = jj_consume_token(INTEGER);
      jj_consume_token(CLOSE_ARRAY);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.value=new Integer(i.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void object() throws ParseException {
                        /*@bgen(jjtree) OBJECT */
                         JSONNode jjtn000 = (JSONNode)JSONPathCompiler.jjtCreate(JJTOBJECT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token name;
    try {
      name = jj_consume_token(IDENTIFIER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.value= name.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  /** Generated Token Manager. */
  public JSONPathCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600,0x480,0x480,};
   }

  /** Constructor with InputStream. */
  public JSONPathCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONPathCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JSONPathCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSONPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JSONPathCompiler(JSONPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JSONPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
